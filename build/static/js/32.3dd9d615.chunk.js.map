{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator/index.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","../node_modules/q/q.js","../node_modules/timers-browserify/main.js","../node_modules/setimmediate/setImmediate.js"],"names":["module","exports","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","definition","bootstrap","hasStacks","Error","e","stack","qFileName","qStartingLine","captureLine","noop","nextTick","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","length","pop","exit","setTimeout","process","toString","setImmediate","window","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","push","call","Function","uncurryThis","f","QReturnValue","array_slice","Array","prototype","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","i","array_map","map","thisp","collect","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","object_toString","isStopIteration","exception","ReturnValue","makeStackTraceLong","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","stackString","lines","split","desiredLines","line","isInternalFrame","isNodeFrame","join","filterStackString","stackLine","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Q","isPromiseAlike","deferred","defer","notify","coerce","fulfill","longStackSupport","longStackCounter","resolvedPromise","messages","progressListeners","promiseDispatch","op","operands","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","len","fallback","result","inspected","when","fulfilled","rejected","progressed","Q_DEBUG","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","_fulfilled","newException","_rejected","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","name","alternative","unhandledReasons","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","at","emit","atReport","splice","untrackRejection","trackRejection","rhs","dispatch","promises","pendingCount","snapshot","any","prev","current","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","array","async","makeGenerator","continuer","verb","StopIteration","generator","errback","spawn","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","concat","console","warn","allSettled","regardless","fail","fin","onUnhandledError","timeout","ms","timeoutId","code","clearTimeout","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","noConflict","scope","global","Timeout","id","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","ref","enroll","item","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","require","clearImmediate","registerImmediate","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","getPrototypeOf","handle","runIfPresent","importScripts","postMessageIsAsynchronous","oldOnMessage","canUsePostMessage","messagePrefix","Math","random","onGlobalMessage","event","data","addEventListener","attachEvent","installPostMessageImplementation","installMessageChannelImplementation","createElement","html","documentElement","script","onreadystatechange","removeChild","appendChild","installReadyStateChangeImplementation","run"],"mappings":"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","file":"static/js/32.3dd9d615.chunk.js","sourcesContent":["module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n"],"sourceRoot":""}